// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String?
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  links     Link[]
  teams     TeamMember[]
  webhooks  Webhook[]
  apiKeys   ApiKey[]

  @@map("users")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members TeamMember[]
  links   Link[]

  @@map("teams")
}

model TeamMember {
  id     String @id @default(cuid())
  role   TeamRole @default(MEMBER)
  userId String
  teamId String

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model Link {
  id          String   @id @default(cuid())
  originalUrl String
  shortCode   String   @unique
  customAlias String?  @unique
  title       String?
  description String?
  tags        String[]
  isActive    Boolean  @default(true)
  expiresAt   DateTime?
  password    String?
  clickCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String?
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)
  teamId String?
  team   Team?  @relation(fields: [teamId], references: [id], onDelete: SetNull)
  clicks Click[]
  utmParams UTMParams?

  @@map("links")
}

model UTMParams {
  id        String @id @default(cuid())
  source    String?
  medium    String?
  campaign  String?
  term      String?
  content   String?
  linkId    String @unique
  link      Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@map("utm_params")
}

model Click {
  id        String   @id @default(cuid())
  linkId    String
  ipAddress String?
  userAgent String?
  referer   String?
  country   String?
  city      String?
  browser   String?
  os        String?
  device    String?
  timestamp DateTime @default(now())

  // Relations
  link Link @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@map("clicks")
}

model Webhook {
  id        String   @id @default(cuid())
  url       String
  events    String[] // ['click', 'link_created', 'link_updated']
  isActive  Boolean  @default(true)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  isActive  Boolean  @default(true)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Analytics {
  id        String   @id @default(cuid())
  date      DateTime
  linkId    String?
  clicks    Int      @default(0)
  uniqueClicks Int   @default(0)
  countries Json?    // { "US": 100, "UK": 50 }
  browsers  Json?    // { "Chrome": 80, "Firefox": 20 }
  devices   Json?    // { "desktop": 60, "mobile": 40 }
  referrers Json?    // { "google": 30, "direct": 70 }

  @@unique([date, linkId])
  @@map("analytics")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
} 